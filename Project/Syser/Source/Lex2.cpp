#include "stdafx.h"
#ifdef CODE_OS_NT_DRV	
#define FILE MYFILE
typedef void MYFILE;
#undef stdout 
#undef stdin
#define stdout 0
#define stdin 0 
#endif
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: z:\\cvsroot/Syser/Source/Syser/Lex2.cpp,v 1.1 2005/03/08 09:23:05 rock Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

//#include <stdio.h>
//#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

//#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 200
#define YY_END_OF_BUFFER 201
static yyconst short int yy_accept[812] =
    {   0,
        0,    0,    0,    0,  201,  199,    1,    3,    2,  160,
      199,  148,  162,  155,  199,  145,  146,  156,  157,  147,
      158,  154,  161,  140,  139,  168,  169,  163,  170,  164,
      167,  138,  138,  152,  153,  165,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  150,  166,  151,  159,  200,
      200,    1,    3,    0,    2,  182,    0,  144,    0,  149,
        0,    0,    0,    0,    0,    0,  187,  183,  192,    0,
        0,  185,  175,  188,  176,  189,  173,  171,    0,  142,
      196,    0,  186,  142,  140,    0,    0,  140,  140,    0,

      139,  139,  139,  172,  177,  179,  181,  180,  178,  138,
        0,    0,  193,  138,  138,  138,  138,  138,  138,  138,
      138,  138,   65,  138,  138,  138,  138,  138,  138,  138,
      138,  138,   77,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  194,
      184,  197,    0,    0,    0,    0,    0,    0,  129,    0,
        0,    0,    0,    0,    0,  143,    0,    0,  174,  195,
        0,  142,    0,  198,    0,  142,  140,  141,  139,  190,
      191,  138,  138,  138,  138,  138,  138,  138,  138,  138,

      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,   74,
      138,  138,  138,   79,  138,  138,  138,  138,   84,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  110,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      142,  141,  141,  138,  138,  138,  138,  138,  138,  138,

      138,  138,  138,  138,  138,   17,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,   51,
      138,   53,  138,   55,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,   68,   69,  138,  138,  138,  138,
      138,   76,  138,   80,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  106,  138,  138,
      109,  138,  138,  138,  138,  117,  138,  119,  138,  138,
      138,    0,    0,    0,  128,  132,    0,    0,    0,    0,

        0,    0,  134,    0,    0,    0,    0,    0,  141,  138,
      138,    6,  138,  138,    9,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
       29,  138,  138,  138,   36,  138,  138,  138,  138,  138,
      138,   44,  138,  138,  138,  138,   50,  138,   52,   54,
       56,   57,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,   72,   73,  138,  138,  138,   82,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,   98,  138,  138,  138,  138,  138,  138,  138,
      108,  138,  138,  138,  114,  138,  116,  138,  138,  138,

      123,    0,  135,  125,  133,    0,    0,    0,    0,  127,
      131,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,   18,  138,  138,  138,  138,  138,  138,
      138,   23,  138,  138,   30,  138,   34,   35,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,   61,  138,  138,  138,   66,  138,  138,
       71,   75,   78,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,   93,  138,  138,   96,  138,   99,  100,
      101,  103,  104,  138,  107,  138,  112,  138,  138,  138,
      138,  138,  124,  136,  126,    0,  137,  138,  138,  138,

        8,   10,  138,  138,   13,  138,  138,  138,  138,  138,
      138,  138,  138,   24,   25,   26,  138,   28,   31,   32,
      138,  138,   38,  138,  138,  138,   42,  138,  138,  138,
       48,  138,  138,  138,  138,   60,  138,  138,  138,  138,
      138,   81,  138,  138,  138,   87,  138,  138,   90,  138,
      138,  138,  138,  138,  138,  138,  111,  138,  138,  118,
      138,  122,  130,  138,  138,    7,  138,  138,   14,  138,
      138,  138,  138,  138,  138,   22,  138,  138,  138,   39,
      138,  138,  138,   46,   47,  138,  138,  138,   59,  138,
      138,  138,  138,   70,  138,   85,   86,   88,   89,   91,

      138,   94,  138,  138,  138,  105,  113,  115,  120,  138,
        5,  138,  138,  138,   45,  138,  138,  138,  138,  138,
      138,  138,  138,   41,  138,  138,  121,  138,  138,   63,
       64,  138,   83,   92,  138,   97,  138,    4,   11,   12,
       15,  138,  138,  138,  138,  138,  138,   37,  138,   43,
      138,   58,   62,  138,  138,  138,  138,  138,   20,  138,
       27,  138,  138,  138,  138,  138,  102,  138,   19,  138,
      138,  138,  138,   67,  138,   16,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,   21,  138,  138,  138,
      138,  138,  138,  138,   95,  138,  138,  138,  138,  138,

      138,  138,  138,  138,  138,   40,  138,  138,   49,   33,
        0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,    1,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   27,   29,   30,   31,   32,   33,
       34,   35,   36,    1,   37,   37,   37,   37,   38,   39,
       40,   40,   40,   40,   40,   41,   40,   40,   40,   40,
       40,   40,   40,   40,   42,   40,   40,   43,   40,   40,
       44,   45,   46,   47,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   40,   58,   59,   60,   61,
       62,   63,   40,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[77] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    1,    1,    1,    1,    1,    1,    4,
        1,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    1,    1,    1,    1,    6,    7,    8,    9,
       10,    9,    9,    1,    1,    1,    1,    9,    6,    6,
        6,    6,    7,    8,    9,    9,    9,    9,   10,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[824] =
    {   0,
        0,    0, 1116, 1115, 1130, 1133,   75, 1133,   81, 1095,
       80,   80, 1094,   79, 1082, 1133, 1133, 1092,   75, 1133,
       76,   77,   96,  128,  179, 1094, 1133,   81, 1090,   84,
     1133,    0,   85, 1133, 1133, 1089, 1074,   58,   67,  106,
       75,   82, 1059,   67, 1058, 1052,  111, 1055,   60, 1064,
      119,  126,  113,   78,  111, 1133,  115, 1133, 1133, 1133,
     1095,  208, 1133,  220,  237, 1133,  174, 1133,  238, 1133,
     1062,  132,  174, 1057, 1049,   77, 1133, 1133, 1133,  171,
      300, 1133, 1133, 1133, 1133, 1133, 1096, 1133, 1091,  214,
     1133, 1107, 1133,  218,  175,  216,  350,  119,  189,    0,

        0,  191,  190, 1133, 1075, 1133, 1133, 1133, 1074,    0,
      241, 1062, 1133,  332, 1044, 1052,  210, 1055, 1054, 1041,
      226, 1042, 1033, 1038, 1033, 1030,  215, 1037, 1033, 1030,
     1036, 1026,    0,  225, 1030, 1024,  134, 1020,  237, 1035,
      233, 1037,  241, 1027, 1023,  238,  233, 1027, 1023,  254,
      245, 1019,  172, 1024, 1023, 1015,  258, 1022, 1020, 1133,
     1133, 1133,  381,    0, 1022,  264, 1023, 1010,  218, 1010,
     1021, 1010, 1021, 1017, 1011, 1133,  389,    0, 1133, 1133,
      413, 1133, 1064, 1133,  422,  292, 1133,  293, 1133, 1133,
     1133,  282,  281, 1014, 1012,  269,  291, 1013, 1001,  304,

     1009,  395,  999,  298, 1011,  400,  995,  253,  314,  291,
      999, 1008, 1003, 1004,  990,  988,  354, 1003,  998,  986,
      368,  999,  999,  994,  986,  986,  991,  978,  993,    0,
      988,  978,  982,    0,  983,  988,  983,  982,    0,  973,
      980,  976,  965,  966,  961,  361,  969,  970,  965,  958,
      971,  959,  961,  968,  954,  952,  952,  954,  951,  369,
      962,    0,  961,  951,  955,  950,  958,  943,  956,  958,
      957,  946,  446,  483,  947,  949,  949,  944,  938,  946,
      946,  935,  937,  942,  939,  940,  931,  471,  525,  453,
      485,  387,  369,  926,  933,  396,  924,  918,  934,  464,

      933,  934,  919,  922,  918,    0,  919,  927,  931,  399,
      929,  953,  950,  916,  463,  913,  911,  915,  922,  909,
      917,  905,  896,  910,  908,  905,  899,  936,  905,    0,
      902,    0,  903,    0,  893,  891,  899,  888,  888,  900,
      882,  891,  891,  889,    0,    0,  891,  883,  893,  879,
      883,    0,  882,    0,  892,  889,  875,  880,  872,  873,
      887,  886,  885,  880,  879,  874,  865,  863,  864,  876,
      860,  872,  862,  866,  871,  870,  861,    0,  870,  849,
        0,  504,  856,  861,  860,    0,  847,    0,  847,  848,
      858,  455,    0,  849, 1133, 1133,  855,  844,  853,  853,

      841,  837, 1133,  843,  848,  846,  472,    0, 1133,  834,
      844,    0,  831,  844,    0,  845,  836,  841,  832,  839,
      825,  841,  838,  830,  826,  466,  829,  543,  817,  855,
        0,  817,  831,  818,    0,  817,  814,  819,  822,  825,
      822,  826,  811,  820,  804,  804,    0,  820,    0,    0,
        0,  820,  806,  807,  812,  813,  800,  799,  808,  803,
      808,  797,    0,    0,  805,  803,  796,    0,  791,  796,
      785,  789,  800,  783,  782,  783,  795,  794,  778,  790,
      781,  775,    0,  788,  785,  787,  771,  780,  786,  782,
        0,  780,  780,  782,    0,  769,    0,  780,  771,  779,

        0,  773, 1133, 1133, 1133,  771,  758,  771,  773, 1133,
     1133,  757,  759,  759,  766,  758,  751,  760,  748,  750,
      761,  752,  757,    0,  743,  738,  745,  745,  777,  780,
      777,    0,  738,  748,  488,  743,    0,    0,  746,  745,
      744,  737,  746,  730,  742,  730,  729,  737,  722,  724,
      736,  719,  719,    0,  735,  721,  720,    0,  730,  723,
        0,    0,    0,  726,  729,  716,  712,  706,  715,  711,
      719,  705,  704,    0,  716,  704,    0,  718,    0,    0,
      718,    0,    0,  699,    0,  710,    0,  703,  709,  702,
      701,  693, 1133, 1133, 1133,  705, 1133,  708,  694,  702,

        0,    0,  691,  704,    0,  686,  702,  691,  692,  691,
      690,  680,  692,    0,    0,    0,  690,    0,    0,    0,
      680,  678,    0,  689,  687,  680,    0,  689,  679,  682,
        0,  686,  686,  684,  679,    0,  665,  666,  665,  680,
      661,    0,  675,  672,  663,    0,  670,  658,    0,  650,
      667,  655,  655,  656,  665,  662,    0,  661,  661,    0,
      659,    0, 1133,  660,  656,    0,  656,  642,    0,  648,
      635,  644,  650,  638,  654,    0,  652,  641,  633,    0,
      650,  638,  631,    0,    0,  636,  628,  628,    0,  639,
      625,  624,  638,    0,  635,    0,    0,    0,    0,    0,

      635,    0,  622,  614,  635,    0,    0,    0,    0,  617,
        0,  631,  628,  621,    0,  620,  621,  611,  622,  622,
      619,  598,  610,    0,  600,  603,    0,  571,  582,    0,
        0,  570,    0,    0,  565,    0,  543,    0,    0,    0,
        0,  538,  541,  528,  522,  538,  542,    0,  528,    0,
      531,    0,    0,  522,  520,  519,  523,  519,    0,  525,
        0,  524,  524,  512,  503,  519,    0,  507,    0,  494,
      497,  504,  490,    0,  492,    0,  476,  485,  467,  477,
      480,  449,   43,   51,   99,  135,    0,  236,  272,  287,
      291,  302,  345,  367,    0,  393,  399,  414,  437,  436,

      427,  428,  437,  450,  451,    0,  450,  451,    0,    0,
     1133,  596,  606,  616,  622,  628,  638,  645,  648,  652,
      656,  660,  666
    } ;

static yyconst short int yy_def[824] =
    {   0,
      811,    1,  812,  812,  811,  811,  811,  811,  811,  811,
      813,  811,  811,  811,  814,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  815,  815,  811,  811,  811,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  813,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  814,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  816,
      811,  817,  811,  816,   24,  818,  811,  811,  811,  819,

       25,  811,  811,  811,  811,  811,  811,  811,  811,  815,
      813,  814,  811,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  811,
      811,  811,  813,  820,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  814,  821,  811,  811,
      811,  811,  817,  811,  811,  822,  811,  819,  811,  811,
      811,  815,  815,  815,  815,  815,  815,  815,  815,  815,

      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  813,  813,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  814,  814,  811,
      823,  811,  811,  815,  815,  815,  815,  815,  815,  815,

      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  813,  274,  811,  811,  811,  811,  811,  811,  811,

      811,  811,  811,  811,  811,  811,  814,  289,  811,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,

      815,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  811,  811,  811,  811,  811,  815,  815,  815,

      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  811,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,

      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,

      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
        0,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811
    } ;

static yyconst short int yy_nxt[1210] =
    {   0,
        6,    7,    8,    9,    9,    9,    7,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   25,   25,   25,   25,   25,   25,   25,
       26,   27,   28,   29,   30,   31,   32,   32,   32,   32,
       33,   32,   32,   34,    6,   35,   36,   37,   32,   38,
       39,   40,   41,   42,   43,   32,   44,   32,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   32,
       32,   32,   56,   57,   58,   59,   62,   63,   64,   64,
       64,   62,   64,   63,   65,   65,   65,   64,   68,   70,
       78,   83,   88,  111,   85,  788,   89,  112,   90,   90,

       90,   90,   90,   90,   90,   90,   90,  789,   84,   86,
       87,   91,   79,  105,  106,  117,   92,  108,  109,  115,
      133,  116,  118,  141,   69,  119,  142,  134,  120,   93,
      128,   71,   72,  125,  156,  126,   73,  174,   74,  157,
      129,  175,   75,  130,  127,  131,   76,   94,  160,   95,
       95,   95,   95,   95,   95,   95,   96,   96,  121,  137,
      187,  158,  790,  138,  122,   97,  159,  123,   98,   99,
      100,  144,  139,  153,  145,  146,  124,  154,  149,  155,
       97,  150,   68,  176,  147,  187,   98,  148,  161,  151,
      166,  237,  167,  238,   99,  168,  152,  100,   94,  791,

      101,  101,  101,  101,  101,  101,  101,  101,  101,   62,
       63,   64,   64,   64,   62,   81,   97,  811,   69,  102,
      103,   64,   63,   64,   64,   64,   64,  169,  264,  187,
      189,   97,  189,  170,  171,   94,  265,  102,   64,   63,
       65,   65,   65,   64,  811,  103,   67,  187,  189,   68,
       67,  181,  182,   97,  182,  181,  182,  189,  182,  163,
      163,  163,  163,  163,  163,  163,  181,  182,   97,  280,
      181,  182,  182,   67,  213,  214,  182,  226,  281,  218,
      227,  255,   67,  233,  219,   69,   67,   67,  220,  245,
      234,   67,  253,  240,  246,  248,  256,  249,   67,  792,

      241,   67,  242,   67,  243,   67,  250,  164,   80,  254,
      259,  261,   80,  324,  269,  262,  270,  260,  328,  325,
      276,  177,  177,  177,  177,  177,  177,  177,  277,  297,
      182,  294,  182,  292,  293,   80,  301,  793,  302,  303,
      295,  329,  298,  794,   80,  182,  296,  304,   80,   80,
      182,  292,  305,   80,  316,  308,  795,  309,  796,  293,
       80,  317,  326,   80,  310,   80,  185,   80,  185,  178,
      327,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      192,  193,  194,  195,  196,  197,  198,  199,  200,   68,
      201,  202,  203,  797,  204,  205,  206,  207,  208,  209,

      210,  176,  273,  273,  273,  273,  273,  273,  273,  409,
      288,  288,  288,  288,  288,  288,  288,  312,  336,  337,
      341,  379,  313,  364,  342,   69,  365,  409,  409,  290,
      380,  290,  798,   81,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  319,  409,   68,  412,  320,  427,  799,  800,
      413,  314,  801,   68,  428,  321,  322,  392,  392,  392,
      392,  392,  392,  392,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  176,  176,  802,  803,  804,  805,  806,
       69,   68,  407,  407,  407,  407,  407,  407,  407,   69,

      807,  808,  809,  810,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  787,  417,   81,   81,  433,  526,  393,
      393,  393,  418,  182,  434,  182,  527,   69,  786,  785,
      784,  393,  393,  393,  393,  393,  393,  176,  182,  619,
      783,  782,  781,  182,  620,  780,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  492,  779,  778,  777,  776,
      493,  408,  408,  408,  494,  529,  775,  530,  774,   81,
      531,  532,  773,  408,  408,  408,  408,  408,  408,  772,
      771,  770,  769,  768,  767,  766,  765,  764,  763,  762,
      761,  760,  759,  758,  757,  533,   60,   60,   60,   60,

       60,   60,   60,   60,   60,   60,   67,  756,   67,   67,
       67,   67,   67,   67,   67,   67,   80,  755,  754,   80,
       80,   80,   80,   80,   80,   80,  110,  110,  110,  110,
      110,  110,   90,  753,   90,   90,  752,   90,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,   96,   96,
      751,   96,  188,  188,  188,  188,  274,  274,  274,  274,
      289,  289,  289,  289,  186,  750,  749,  186,  748,  186,
      291,  747,  746,  291,  745,  291,  744,  743,  742,  741,
      740,  739,  738,  737,  736,  735,  734,  733,  732,  731,
      730,  729,  728,  727,  726,  725,  724,  723,  722,  721,

      720,  719,  718,  717,  716,  715,  714,  713,  712,  711,
      710,  709,  708,  707,  706,  705,  704,  703,  702,  701,
      700,  699,  698,  697,  696,  695,  694,  693,  692,  691,
      690,  689,  688,  687,  686,  685,  684,  683,  682,  681,
      680,  679,  678,  677,  676,  675,  674,  673,  672,  671,
      670,  669,  668,  667,  666,  665,  664,  663,  662,  661,
      660,  659,  658,  657,  656,  655,  654,  653,  652,  651,
      650,  649,  648,  647,  646,  645,  644,  643,  642,  641,
      640,  639,  638,  637,  636,  635,  634,  633,  632,  631,
      630,  629,  628,  627,  626,  625,  624,  623,  622,  621,

      618,  617,  616,  615,  614,  613,  612,  611,  610,  609,
      608,  607,  606,  605,  604,  603,  602,  601,  600,  599,
      598,  597,  596,  595,  594,  593,  592,  591,  590,  589,
      588,  587,  586,  585,  584,  583,  582,  581,  580,  579,
      578,  577,  576,  575,  574,  573,  572,  571,  570,  569,
      568,  567,  566,  565,  564,  563,  562,  561,  560,  559,
      558,  557,  556,  555,  554,  553,  552,  551,  550,  549,
      548,  547,  546,  545,  544,  543,  542,  541,  540,  539,
      538,  537,  536,  535,  534,  528,  525,  524,  523,  522,
      521,  520,  519,  518,  517,  516,  515,  514,  513,  512,

      511,  510,  509,  508,  507,  506,  505,  504,  503,  502,
      501,  500,  499,  498,  497,  496,  495,  491,  490,  489,
      488,  487,  486,  485,  484,  483,  482,  481,  480,  479,
      478,  477,  476,  475,  474,  473,  472,  471,  470,  469,
      468,  467,  466,  465,  464,  463,  462,  461,  460,  459,
      458,  457,  456,  455,  454,  453,  452,  451,  450,  449,
      448,  447,  446,  445,  444,  443,  442,  441,  440,  439,
      438,  437,  436,  435,  432,  431,  430,  429,  426,  425,
      424,  423,  422,  421,  420,  419,  416,  415,  414,  411,
      410,  406,  405,  404,  403,  402,  401,  400,  399,  398,

      397,  396,  395,  394,  391,  390,  389,  388,  387,  386,
      385,  384,  383,  382,  381,  378,  377,  376,  375,  374,
      373,  372,  371,  370,  369,  368,  367,  366,  363,  362,
      361,  360,  359,  358,  357,  356,  355,  354,  353,  352,
      351,  350,  349,  348,  347,  346,  345,  344,  343,  340,
      339,  338,  335,  334,  333,  332,  331,  330,  323,  318,
      315,  311,  307,  306,  300,  299,  184,  287,  286,  285,
      284,  283,  282,  279,  278,  275,  272,  271,  268,  267,
      266,  263,  258,  257,  252,  251,  247,  244,  239,  236,
      235,  232,  231,  230,  229,  228,  225,  224,  223,  222,

      221,  217,  216,  215,  212,  211,   81,  191,  190,  184,
      180,  179,  173,  172,  165,  162,  143,  140,  136,  135,
      132,  114,  113,  107,  104,   82,   81,   77,   66,  811,
       61,   61,    5,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,

      811,  811,  811,  811,  811,  811,  811,  811,  811
    } ;

static yyconst short int yy_chk[1210] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    7,    7,    7,    7,
        7,    7,    9,    9,    9,    9,    9,    9,   11,   12,
       14,   19,   22,   33,   21,  783,   22,   33,   22,   22,

       22,   22,   22,   22,   22,   22,   22,  784,   19,   21,
       21,   23,   14,   28,   28,   39,   23,   30,   30,   38,
       44,   38,   39,   49,   11,   39,   49,   44,   39,   23,
       42,   12,   12,   41,   54,   41,   12,   76,   12,   54,
       42,   76,   12,   42,   41,   42,   12,   24,   57,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   40,   47,
       98,   55,  785,   47,   40,   24,   55,   40,   24,   24,
       24,   51,   47,   53,   51,   51,   40,   53,   52,   53,
       24,   52,   67,   80,   51,   98,   24,   51,   57,   52,
       72,  137,   72,  137,   24,   72,   52,   24,   25,  786,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   62,
       62,   62,   62,   62,   62,   80,   25,   95,   67,   25,
       25,   64,   64,   64,   64,   64,   64,   73,  153,   99,
      103,   25,  102,   73,   73,   96,  153,   25,   65,   65,
       65,   65,   65,   65,   95,   25,   69,   99,  103,  111,
       69,   90,   90,   96,   90,   94,   94,  102,   94,   69,
       69,   69,   69,   69,   69,   69,   90,   90,   96,  169,
       94,   94,   90,   69,  117,  117,   94,  127,  169,  121,
      127,  147,   69,  134,  121,  111,   69,   69,  121,  141,
      134,   69,  146,  139,  141,  143,  147,  143,   69,  788,

      139,   69,  139,   69,  139,   69,  143,   69,   81,  146,
      150,  151,   81,  208,  157,  151,  157,  150,  210,  208,
      166,   81,   81,   81,   81,   81,   81,   81,  166,  193,
      186,  192,  186,  188,  188,   81,  196,  789,  196,  197,
      192,  210,  193,  790,   81,  186,  192,  197,   81,   81,
      186,  188,  197,   81,  204,  200,  791,  200,  792,  188,
       81,  204,  209,   81,  200,   81,   97,   81,   97,   81,
      209,   97,   97,   97,   97,   97,   97,   97,   97,   97,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  163,
      114,  114,  114,  793,  114,  114,  114,  114,  114,  114,

      114,  177,  163,  163,  163,  163,  163,  163,  163,  293,
      177,  177,  177,  177,  177,  177,  177,  202,  217,  217,
      221,  260,  202,  246,  221,  163,  246,  293,  292,  181,
      260,  181,  794,  177,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  206,  292,  273,  296,  206,  310,  796,  797,
      296,  202,  798,  392,  310,  206,  206,  273,  273,  273,
      273,  273,  273,  273,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  288,  407,  799,  800,  801,  802,  803,
      273,  274,  288,  288,  288,  288,  288,  288,  288,  392,

      804,  805,  807,  808,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  782,  300,  288,  407,  315,  426,  274,
      274,  274,  300,  291,  315,  291,  426,  274,  781,  780,
      779,  274,  274,  274,  274,  274,  274,  289,  291,  535,
      778,  777,  775,  291,  535,  773,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  382,  772,  771,  770,  768,
      382,  289,  289,  289,  382,  428,  766,  428,  765,  289,
      428,  428,  764,  289,  289,  289,  289,  289,  289,  763,
      762,  760,  758,  757,  756,  755,  754,  751,  749,  747,
      746,  745,  744,  743,  742,  428,  812,  812,  812,  812,

      812,  812,  812,  812,  812,  812,  813,  737,  813,  813,
      813,  813,  813,  813,  813,  813,  814,  735,  732,  814,
      814,  814,  814,  814,  814,  814,  815,  815,  815,  815,
      815,  815,  816,  729,  816,  816,  728,  816,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  818,  818,
      726,  818,  819,  819,  819,  819,  820,  820,  820,  820,
      821,  821,  821,  821,  822,  725,  723,  822,  722,  822,
      823,  721,  720,  823,  719,  823,  718,  717,  716,  714,
      713,  712,  710,  705,  704,  703,  701,  695,  693,  692,
      691,  690,  688,  687,  686,  683,  682,  681,  679,  678,

      677,  675,  674,  673,  672,  671,  670,  668,  667,  665,
      664,  661,  659,  658,  656,  655,  654,  653,  652,  651,
      650,  648,  647,  645,  644,  643,  641,  640,  639,  638,
      637,  635,  634,  633,  632,  630,  629,  628,  626,  625,
      624,  622,  621,  617,  613,  612,  611,  610,  609,  608,
      607,  606,  604,  603,  600,  599,  598,  596,  592,  591,
      590,  589,  588,  586,  584,  581,  578,  576,  575,  573,
      572,  571,  570,  569,  568,  567,  566,  565,  564,  560,
      559,  557,  556,  555,  553,  552,  551,  550,  549,  548,
      547,  546,  545,  544,  543,  542,  541,  540,  539,  536,

      534,  533,  531,  530,  529,  528,  527,  526,  525,  523,
      522,  521,  520,  519,  518,  517,  516,  515,  514,  513,
      512,  509,  508,  507,  506,  502,  500,  499,  498,  496,
      494,  493,  492,  490,  489,  488,  487,  486,  485,  484,
      482,  481,  480,  479,  478,  477,  476,  475,  474,  473,
      472,  471,  470,  469,  467,  466,  465,  462,  461,  460,
      459,  458,  457,  456,  455,  454,  453,  452,  448,  446,
      445,  444,  443,  442,  441,  440,  439,  438,  437,  436,
      434,  433,  432,  430,  429,  427,  425,  424,  423,  422,
      421,  420,  419,  418,  417,  416,  414,  413,  411,  410,

      406,  405,  404,  402,  401,  400,  399,  398,  397,  394,
      391,  390,  389,  387,  385,  384,  383,  380,  379,  377,
      376,  375,  374,  373,  372,  371,  370,  369,  368,  367,
      366,  365,  364,  363,  362,  361,  360,  359,  358,  357,
      356,  355,  353,  351,  350,  349,  348,  347,  344,  343,
      342,  341,  340,  339,  338,  337,  336,  335,  333,  331,
      329,  328,  327,  326,  325,  324,  323,  322,  321,  320,
      319,  318,  317,  316,  314,  313,  312,  311,  309,  308,
      307,  305,  304,  303,  302,  301,  299,  298,  297,  295,
      294,  287,  286,  285,  284,  283,  282,  281,  280,  279,

      278,  277,  276,  275,  272,  271,  270,  269,  268,  267,
      266,  265,  264,  263,  261,  259,  258,  257,  256,  255,
      254,  253,  252,  251,  250,  249,  248,  247,  245,  244,
      243,  242,  241,  240,  238,  237,  236,  235,  233,  232,
      231,  229,  228,  227,  226,  225,  224,  223,  222,  220,
      219,  218,  216,  215,  214,  213,  212,  211,  207,  205,
      203,  201,  199,  198,  195,  194,  183,  175,  174,  173,
      172,  171,  170,  168,  167,  165,  159,  158,  156,  155,
      154,  152,  149,  148,  145,  144,  142,  140,  138,  136,
      135,  132,  131,  130,  129,  128,  126,  125,  124,  123,

      122,  120,  119,  118,  116,  115,  112,  109,  105,   92,
       89,   87,   75,   74,   71,   61,   50,   48,   46,   45,
       43,   37,   36,   29,   26,   18,   15,   13,   10,    5,
        4,    3,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,

      811,  811,  811,  811,  811,  811,  811,  811,  811
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
#include "Lex2.h"
#ifdef CODE_OS_NT_DRV
#define malloc mymalloc
#define free myfree
#define realloc myrealloc
void myfree(void *);
void* mymalloc(size_t size);
void* myrealloc(void* path, size_t size);
//#define FILE MYFILE
//typedef void MYFILE;
#endif
#define YY_FATAL_ERROR
/* Included code before lex code */
/*************** Includes and Defines *****************************/
/*
__abstract  |
__alignof |
__asm |
__assume |
__based |
__box  |
__cdecl |
__declspec |
__delegate  |
__event |
__except |
__fastcall |
__forceinline |
__gc  |
__hook | 
__identifier |
__if_exists |
__if_not_exists |
__inline |
__int8 |
__int16 |
__int32 |
__int64 |
__interface |
__leave |
__m64 |
__m128 |
__m128d |
__m128i |
__multiple_inheritance |
__nogc  |
__noop |
__pin  |
__property  |
__raise |
__sealed |
__single_inheritance |
__stdcall |
__super |
__try_cast | 
__try |
__except | 
__finally |
__unhook  |
__uuidof |
__value  |
__virtual_inheritance |
__w64 |
bool |
break |
case |
catch |
char |
class |
const |
const_cast |
continue |
default |
delete |
deprecated  |
dllexport  |
dllimport  |
do |
double |
dynamic_cast |
else |
enum |
explicit |
extern |
false |
float |
for |
friend |
goto |
if |
inline |
int |
long |
mutable |
naked  |
namespace |
new |
noinline  |
noreturn |
nothrow  |
novtable  |
operator |
private |
property | 
protected |
public |
register |
reinterpret_cast |
return |
selectany  |
short |
signed |
sizeof |
static |
static_cast |
struct |
switch |
template |
this |
thread  |
throw |
true |
try |
typedef |
typeid |
typename |
union |
unsigned | 
using |  
uuid | 
virtual | 
void |
volatile |
__wchar_t |
wchar_t |
while   |
*/


typedef char * YYSTYPE; /* interface with lexer: should be  in  header
                        file*/

char  *  yylval;  /*  We  will always point at the text of the lexeme.
          This makes it easy to print out nice trees when  YYDEBUG  is
          enabled.   (see  C++  grammar  file  and  its  definition of
          YYDEBUG_LEXER_TEXT to be "yylval" */



#define WHITE_RETURN(x) /* do nothing */

#define NEW_LINE_RETURN() WHITE_RETURN('\n')

#define PA_KEYWORD_RETURN(x)   RETURN_VAL(x)  /* standard C PArser Keyword */
#define CPP_KEYWORD_RETURN(x)  PA_KEYWORD_RETURN(x)  /* C++ keyword */
#define PPPA_KEYWORD_RETURN(x) RETURN_VAL(x)  /* both PreProcessor and PArser keyword */
#define PP_KEYWORD_RETURN(x)   IDENTIFIER_RETURN()
#define COMMENT_RETURN()	RETURN_VAL(x)



#define NUMERICAL_RETURN(x) RETURN_VAL(x)            /* some sort of constant */
#define LITERAL_RETURN(x)   RETURN_VAL(x)            /* a string literal */

#define RETURN_VAL(x) yylval = yytext; return(x);

#define isatty(a) (1)
#define fileno(a) (1)
#define YY_SKIP_YYWRAP
int main1(int argc, char*argv[]);
int yywrap(){return 1;}
#undef YY_INPUT
#define YY_INPUT(b,r,ms) (r = my_yyinput(b,ms))
#ifndef min
#define min(a,b) ((a)<(b)?(a):(b))
#endif
int my_yyinput(char* buf,int max_size);
#define ECHO
#define COMMENT 1


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;





	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = (YY_CHAR)yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 812 )
					yy_c = (YY_CHAR)yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1133 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{
			RETURN_VAL(LEX_WHITE_SPACE);
			}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
			RETURN_VAL(LEX_WHITE_SPACE);
			}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
			RETURN_VAL(LEX_WHITE_SPACE);
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
{RETURN_VAL(LEX___ABSTRACT);}
	YY_BREAK
case 5:
YY_RULE_SETUP
{RETURN_VAL(LEX___ALIGNOF);}
	YY_BREAK
case 6:
YY_RULE_SETUP
{RETURN_VAL(LEX___ASM);}
	YY_BREAK
case 7:
YY_RULE_SETUP
{RETURN_VAL(LEX___ASSUME);}
	YY_BREAK
case 8:
YY_RULE_SETUP
{RETURN_VAL(LEX___BASED);}
	YY_BREAK
case 9:
YY_RULE_SETUP
{RETURN_VAL(LEX___BOX);}
	YY_BREAK
case 10:
YY_RULE_SETUP
{RETURN_VAL(LEX___CDECL);}
	YY_BREAK
case 11:
YY_RULE_SETUP
{RETURN_VAL(LEX___DECLSPEC);}
	YY_BREAK
case 12:
YY_RULE_SETUP
{RETURN_VAL(LEX___DELEGATE);}
	YY_BREAK
case 13:
YY_RULE_SETUP
{RETURN_VAL(LEX___EVENT);}
	YY_BREAK
case 14:
YY_RULE_SETUP
{RETURN_VAL(LEX___EXCEPT);}
	YY_BREAK
case 15:
YY_RULE_SETUP
{RETURN_VAL(LEX___FASTCALL);}
	YY_BREAK
case 16:
YY_RULE_SETUP
{RETURN_VAL(LEX___FORCEINLINE);}
	YY_BREAK
case 17:
YY_RULE_SETUP
{RETURN_VAL(LEX___GC);}
	YY_BREAK
case 18:
YY_RULE_SETUP
{RETURN_VAL(LEX___HOOK);}
	YY_BREAK
case 19:
YY_RULE_SETUP
{RETURN_VAL(LEX___IDENTIFIER);}
	YY_BREAK
case 20:
YY_RULE_SETUP
{RETURN_VAL(LEX___IF_EXISTS);}
	YY_BREAK
case 21:
YY_RULE_SETUP
{RETURN_VAL(LEX___IF_NOT_EXISTS);}
	YY_BREAK
case 22:
YY_RULE_SETUP
{RETURN_VAL(LEX___INLINE);}
	YY_BREAK
case 23:
YY_RULE_SETUP
{RETURN_VAL(LEX___INT8);}
	YY_BREAK
case 24:
YY_RULE_SETUP
{RETURN_VAL(LEX___INT16);}
	YY_BREAK
case 25:
YY_RULE_SETUP
{RETURN_VAL(LEX___INT32);}
	YY_BREAK
case 26:
YY_RULE_SETUP
{RETURN_VAL(LEX___INT64);}
	YY_BREAK
case 27:
YY_RULE_SETUP
{RETURN_VAL(LEX___INTERFACE);}
	YY_BREAK
case 28:
YY_RULE_SETUP
{RETURN_VAL(LEX___LEAVE);}
	YY_BREAK
case 29:
YY_RULE_SETUP
{RETURN_VAL(LEX___M64);}
	YY_BREAK
case 30:
YY_RULE_SETUP
{RETURN_VAL(LEX___M128);}
	YY_BREAK
case 31:
YY_RULE_SETUP
{RETURN_VAL(LEX___M128D);}
	YY_BREAK
case 32:
YY_RULE_SETUP
{RETURN_VAL(LEX___M128I);}
	YY_BREAK
case 33:
YY_RULE_SETUP
{RETURN_VAL(LEX___MULTIPLE_INHERITANCE);}
	YY_BREAK
case 34:
YY_RULE_SETUP
{RETURN_VAL(LEX___NOGC);}
	YY_BREAK
case 35:
YY_RULE_SETUP
{RETURN_VAL(LEX___NOOP);}
	YY_BREAK
case 36:
YY_RULE_SETUP
{RETURN_VAL(LEX___PIN);}
	YY_BREAK
case 37:
YY_RULE_SETUP
{RETURN_VAL(LEX___PROPERTY);}
	YY_BREAK
case 38:
YY_RULE_SETUP
{RETURN_VAL(LEX___RAISE);}
	YY_BREAK
case 39:
YY_RULE_SETUP
{RETURN_VAL(LEX___SEALED);}
	YY_BREAK
case 40:
YY_RULE_SETUP
{RETURN_VAL(LEX___SINGLE_INHERITANCE);}
	YY_BREAK
case 41:
YY_RULE_SETUP
{RETURN_VAL(LEX___STDCALL);}
	YY_BREAK
case 42:
YY_RULE_SETUP
{RETURN_VAL(LEX___SUPER);}
	YY_BREAK
case 43:
YY_RULE_SETUP
{RETURN_VAL(LEX___TRY_CAST);}
	YY_BREAK
case 44:
YY_RULE_SETUP
{RETURN_VAL(LEX___TRY);}
	YY_BREAK
case 45:
YY_RULE_SETUP
{RETURN_VAL(LEX___FINALLY);}
	YY_BREAK
case 46:
YY_RULE_SETUP
{RETURN_VAL(LEX___UNHOOK);}
	YY_BREAK
case 47:
YY_RULE_SETUP
{RETURN_VAL(LEX___UUIDOF);}
	YY_BREAK
case 48:
YY_RULE_SETUP
{RETURN_VAL(LEX___VALUE);}
	YY_BREAK
case 49:
YY_RULE_SETUP
{RETURN_VAL(LEX___VIRTUAL_INHERITANCE);}
	YY_BREAK
case 50:
YY_RULE_SETUP
{RETURN_VAL(LEX___W64);}
	YY_BREAK
case 51:
YY_RULE_SETUP
{RETURN_VAL(LEX_BOOL);}
	YY_BREAK
case 52:
YY_RULE_SETUP
{RETURN_VAL(LEX_BREAK);}
	YY_BREAK
case 53:
YY_RULE_SETUP
{RETURN_VAL(LEX_CASE);}
	YY_BREAK
case 54:
YY_RULE_SETUP
{RETURN_VAL(LEX_CATCH);}
	YY_BREAK
case 55:
YY_RULE_SETUP
{RETURN_VAL(LEX_CHAR);}
	YY_BREAK
case 56:
YY_RULE_SETUP
{RETURN_VAL(LEX_CLASS);}
	YY_BREAK
case 57:
YY_RULE_SETUP
{RETURN_VAL(LEX_CONST);}
	YY_BREAK
case 58:
YY_RULE_SETUP
{RETURN_VAL(LEX_CONST_CAST);}
	YY_BREAK
case 59:
YY_RULE_SETUP
{RETURN_VAL(LEX_CONTINUE);}
	YY_BREAK
case 60:
YY_RULE_SETUP
{RETURN_VAL(LEX_DEFAULT);}
	YY_BREAK
case 61:
YY_RULE_SETUP
{RETURN_VAL(LEX_DELETE);}
	YY_BREAK
case 62:
YY_RULE_SETUP
{RETURN_VAL(LEX_DEPRECATED);}
	YY_BREAK
case 63:
YY_RULE_SETUP
{RETURN_VAL(LEX_DLLEXPORT);}
	YY_BREAK
case 64:
YY_RULE_SETUP
{RETURN_VAL(LEX_DLLIMPORT);}
	YY_BREAK
case 65:
YY_RULE_SETUP
{RETURN_VAL(LEX_DO);}
	YY_BREAK
case 66:
YY_RULE_SETUP
{RETURN_VAL(LEX_DOUBLE);}
	YY_BREAK
case 67:
YY_RULE_SETUP
{RETURN_VAL(LEX_DYNAMIC_CAST);}
	YY_BREAK
case 68:
YY_RULE_SETUP
{RETURN_VAL(LEX_ELSE);}
	YY_BREAK
case 69:
YY_RULE_SETUP
{RETURN_VAL(LEX_ENUM);}
	YY_BREAK
case 70:
YY_RULE_SETUP
{RETURN_VAL(LEX_EXPLICIT);}
	YY_BREAK
case 71:
YY_RULE_SETUP
{RETURN_VAL(LEX_EXTERN);}
	YY_BREAK
case 72:
YY_RULE_SETUP
{RETURN_VAL(LEX_FALSE);}
	YY_BREAK
case 73:
YY_RULE_SETUP
{RETURN_VAL(LEX_FLOAT);}
	YY_BREAK
case 74:
YY_RULE_SETUP
{RETURN_VAL(LEX_FOR);}
	YY_BREAK
case 75:
YY_RULE_SETUP
{RETURN_VAL(LEX_FRIEND);}
	YY_BREAK
case 76:
YY_RULE_SETUP
{RETURN_VAL(LEX_GOTO);}
	YY_BREAK
case 77:
YY_RULE_SETUP
{RETURN_VAL(LEX_IF);}
	YY_BREAK
case 78:
YY_RULE_SETUP
{RETURN_VAL(LEX_INLINE);}
	YY_BREAK
case 79:
YY_RULE_SETUP
{RETURN_VAL(LEX_INT);}
	YY_BREAK
case 80:
YY_RULE_SETUP
{RETURN_VAL(LEX_LONG);}
	YY_BREAK
case 81:
YY_RULE_SETUP
{RETURN_VAL(LEX_MUTABLE);}
	YY_BREAK
case 82:
YY_RULE_SETUP
{RETURN_VAL(LEX_NAKED);}
	YY_BREAK
case 83:
YY_RULE_SETUP
{RETURN_VAL(LEX_NAMESPACE);}
	YY_BREAK
case 84:
YY_RULE_SETUP
{RETURN_VAL(LEX_NEW);}
	YY_BREAK
case 85:
YY_RULE_SETUP
{RETURN_VAL(LEX_NOINLINE);}
	YY_BREAK
case 86:
YY_RULE_SETUP
{RETURN_VAL(LEX_NORETURN);}
	YY_BREAK
case 87:
YY_RULE_SETUP
{RETURN_VAL(LEX_NOTHROW);}
	YY_BREAK
case 88:
YY_RULE_SETUP
{RETURN_VAL(LEX_NOVTABLE);}
	YY_BREAK
case 89:
YY_RULE_SETUP
{RETURN_VAL(LEX_OPERATOR);}
	YY_BREAK
case 90:
YY_RULE_SETUP
{RETURN_VAL(LEX_PRIVATE);}
	YY_BREAK
case 91:
YY_RULE_SETUP
{RETURN_VAL(LEX_PROPERTY);}
	YY_BREAK
case 92:
YY_RULE_SETUP
{RETURN_VAL(LEX_PROTECTED);}
	YY_BREAK
case 93:
YY_RULE_SETUP
{RETURN_VAL(LEX_PUBLIC);}
	YY_BREAK
case 94:
YY_RULE_SETUP
{RETURN_VAL(LEX_REGISTER);}
	YY_BREAK
case 95:
YY_RULE_SETUP
{RETURN_VAL(LEX_REINTERPRET_CAST);}
	YY_BREAK
case 96:
YY_RULE_SETUP
{RETURN_VAL(LEX_RETURN);}
	YY_BREAK
case 97:
YY_RULE_SETUP
{RETURN_VAL(LEX_SELECTANY);}
	YY_BREAK
case 98:
YY_RULE_SETUP
{RETURN_VAL(LEX_SHORT);}
	YY_BREAK
case 99:
YY_RULE_SETUP
{RETURN_VAL(LEX_SIGNED);}
	YY_BREAK
case 100:
YY_RULE_SETUP
{RETURN_VAL(LEX_SIZEOF);}
	YY_BREAK
case 101:
YY_RULE_SETUP
{RETURN_VAL(LEX_STATIC);}
	YY_BREAK
case 102:
YY_RULE_SETUP
{RETURN_VAL(LEX_STATIC_CAST);}
	YY_BREAK
case 103:
YY_RULE_SETUP
{RETURN_VAL(LEX_STRUCT);}
	YY_BREAK
case 104:
YY_RULE_SETUP
{RETURN_VAL(LEX_SWITCH);}
	YY_BREAK
case 105:
YY_RULE_SETUP
{RETURN_VAL(LEX_TEMPLATE);}
	YY_BREAK
case 106:
YY_RULE_SETUP
{RETURN_VAL(LEX_THIS);}
	YY_BREAK
case 107:
YY_RULE_SETUP
{RETURN_VAL(LEX_THREAD);}
	YY_BREAK
case 108:
YY_RULE_SETUP
{RETURN_VAL(LEX_THROW);}
	YY_BREAK
case 109:
YY_RULE_SETUP
{RETURN_VAL(LEX_TRUE);}
	YY_BREAK
case 110:
YY_RULE_SETUP
{RETURN_VAL(LEX_TRY);}
	YY_BREAK
case 111:
YY_RULE_SETUP
{RETURN_VAL(LEX_TYPEDEF);}
	YY_BREAK
case 112:
YY_RULE_SETUP
{RETURN_VAL(LEX_TYPEID);}
	YY_BREAK
case 113:
YY_RULE_SETUP
{RETURN_VAL(LEX_TYPENAME);}
	YY_BREAK
case 114:
YY_RULE_SETUP
{RETURN_VAL(LEX_UNION);}
	YY_BREAK
case 115:
YY_RULE_SETUP
{RETURN_VAL(LEX_UNSIGNED);}
	YY_BREAK
case 116:
YY_RULE_SETUP
{RETURN_VAL(LEX_USING);}
	YY_BREAK
case 117:
YY_RULE_SETUP
{RETURN_VAL(LEX_UUID);}
	YY_BREAK
case 118:
YY_RULE_SETUP
{RETURN_VAL(LEX_VIRTUAL);}
	YY_BREAK
case 119:
YY_RULE_SETUP
{RETURN_VAL(LEX_VOID);}
	YY_BREAK
case 120:
YY_RULE_SETUP
{RETURN_VAL(LEX_VOLATILE);}
	YY_BREAK
case 121:
YY_RULE_SETUP
{RETURN_VAL(LEX___WCHAR_T);}
	YY_BREAK
case 122:
YY_RULE_SETUP
{RETURN_VAL(LEX_WCHAR_T);}
	YY_BREAK
case 123:
YY_RULE_SETUP
{RETURN_VAL(LEX_WHILE);}
	YY_BREAK
case 124:
YY_RULE_SETUP
{RETURN_VAL(LEX_PRE_DEFINE);}
	YY_BREAK
case 125:
YY_RULE_SETUP
{RETURN_VAL(LEX_PRE_ERROR);}
	YY_BREAK
case 126:
YY_RULE_SETUP
{RETURN_VAL(LEX_PRE_IMPORT);}
	YY_BREAK
case 127:
YY_RULE_SETUP
{RETURN_VAL(LEX_PRE_UNDEF);}
	YY_BREAK
case 128:
YY_RULE_SETUP
{RETURN_VAL(LEX_PRE_ELIF);}
	YY_BREAK
case 129:
YY_RULE_SETUP
{RETURN_VAL(LEX_PRE_IF);}
	YY_BREAK
case 130:
YY_RULE_SETUP
{RETURN_VAL(LEX_INCLUDE);}
	YY_BREAK
case 131:
YY_RULE_SETUP
{RETURN_VAL(LEX_PRE_USING);}
	YY_BREAK
case 132:
YY_RULE_SETUP
{RETURN_VAL(LEX_PRE_ELSE);}
	YY_BREAK
case 133:
YY_RULE_SETUP
{RETURN_VAL(LEX_PRE_IFDEF);}
	YY_BREAK
case 134:
YY_RULE_SETUP
{RETURN_VAL(LEX_PRE_LINE);}
	YY_BREAK
case 135:
YY_RULE_SETUP
{RETURN_VAL(LEX_PRE_ENDIF);}
	YY_BREAK
case 136:
YY_RULE_SETUP
{RETURN_VAL(LEX_PRE_IFNDEF);}
	YY_BREAK
case 137:
YY_RULE_SETUP
{RETURN_VAL(LEX_PRE_GRAMA);}
	YY_BREAK
case 138:
YY_RULE_SETUP
{RETURN_VAL(LEX_IDENTIFIER);}
	YY_BREAK
case 139:
YY_RULE_SETUP
{RETURN_VAL(LEX_INTEGERconstant);}
	YY_BREAK
case 140:
YY_RULE_SETUP
{RETURN_VAL(LEX_OCTALconstant);}
	YY_BREAK
case 141:
YY_RULE_SETUP
{RETURN_VAL(LEX_HEXconstant);}
	YY_BREAK
case 142:
YY_RULE_SETUP
{RETURN_VAL(LEX_FLOATINGconstant);}
	YY_BREAK
case 143:
YY_RULE_SETUP
{RETURN_VAL(LEX_CHARACTERconstant);}
	YY_BREAK
case 144:
YY_RULE_SETUP
{RETURN_VAL(LEX_STRINGliteral);}
	YY_BREAK
case 145:
YY_RULE_SETUP
{RETURN_VAL(LEX_LP);}
	YY_BREAK
case 146:
YY_RULE_SETUP
{RETURN_VAL(LEX_RP);}
	YY_BREAK
case 147:
YY_RULE_SETUP
{RETURN_VAL(LEX_COMMA);}
	YY_BREAK
case 148:
YY_RULE_SETUP
{RETURN_VAL('#') ;}
	YY_BREAK
case 149:
YY_RULE_SETUP
{RETURN_VAL(LEX_POUNDPOUND);}
	YY_BREAK
case 150:
YY_RULE_SETUP
{RETURN_VAL(LEX_LC);}
	YY_BREAK
case 151:
YY_RULE_SETUP
{RETURN_VAL(LEX_RC);}
	YY_BREAK
case 152:
YY_RULE_SETUP
{RETURN_VAL(LEX_LB);}
	YY_BREAK
case 153:
YY_RULE_SETUP
{RETURN_VAL(LEX_RB);}
	YY_BREAK
case 154:
YY_RULE_SETUP
{RETURN_VAL(LEX_DOT);}
	YY_BREAK
case 155:
YY_RULE_SETUP
{RETURN_VAL(LEX_AND);}
	YY_BREAK
case 156:
YY_RULE_SETUP
{RETURN_VAL(LEX_STAR);}
	YY_BREAK
case 157:
YY_RULE_SETUP
{RETURN_VAL(LEX_PLUS);}
	YY_BREAK
case 158:
YY_RULE_SETUP
{RETURN_VAL(LEX_MINUS);}
	YY_BREAK
case 159:
YY_RULE_SETUP
{RETURN_VAL(LEX_NEGATE);}
	YY_BREAK
case 160:
YY_RULE_SETUP
{RETURN_VAL(LEX_NOT);}
	YY_BREAK
case 161:
YY_RULE_SETUP
{RETURN_VAL(LEX_DIV);}
	YY_BREAK
case 162:
YY_RULE_SETUP
{RETURN_VAL(LEX_MOD);}
	YY_BREAK
case 163:
YY_RULE_SETUP
{RETURN_VAL(LEX_LT);}
	YY_BREAK
case 164:
YY_RULE_SETUP
{RETURN_VAL(LEX_GT);}
	YY_BREAK
case 165:
YY_RULE_SETUP
{RETURN_VAL(LEX_XOR);}
	YY_BREAK
case 166:
YY_RULE_SETUP
{RETURN_VAL(LEX_PIPE);}
	YY_BREAK
case 167:
YY_RULE_SETUP
{RETURN_VAL(LEX_QUESTION);}
	YY_BREAK
case 168:
YY_RULE_SETUP
{RETURN_VAL(LEX_COLON);}
	YY_BREAK
case 169:
YY_RULE_SETUP
{RETURN_VAL(LEX_SEMICOLON);}
	YY_BREAK
case 170:
YY_RULE_SETUP
{RETURN_VAL(LEX_ASSIGN);}
	YY_BREAK
case 171:
YY_RULE_SETUP
{RETURN_VAL(LEX_DOTstar);}
	YY_BREAK
case 172:
YY_RULE_SETUP
{RETURN_VAL(LEX_CLCL);}
	YY_BREAK
case 173:
YY_RULE_SETUP
{RETURN_VAL(LEX_ARROW);}
	YY_BREAK
case 174:
YY_RULE_SETUP
{RETURN_VAL(LEX_ARROWstar);}
	YY_BREAK
case 175:
YY_RULE_SETUP
{RETURN_VAL(LEX_ICR);}
	YY_BREAK
case 176:
YY_RULE_SETUP
{RETURN_VAL(LEX_DECR);}
	YY_BREAK
case 177:
YY_RULE_SETUP
{RETURN_VAL(LEX_LS);}
	YY_BREAK
case 178:
YY_RULE_SETUP
{RETURN_VAL(LEX_RS);}
	YY_BREAK
case 179:
YY_RULE_SETUP
{RETURN_VAL(LEX_LE);}
	YY_BREAK
case 180:
YY_RULE_SETUP
{RETURN_VAL(LEX_GE);}
	YY_BREAK
case 181:
YY_RULE_SETUP
{RETURN_VAL(LEX_EQ);}
	YY_BREAK
case 182:
YY_RULE_SETUP
{RETURN_VAL(LEX_NE);}
	YY_BREAK
case 183:
YY_RULE_SETUP
{RETURN_VAL(LEX_ANDAND);}
	YY_BREAK
case 184:
YY_RULE_SETUP
{RETURN_VAL(LEX_OROR);}
	YY_BREAK
case 185:
YY_RULE_SETUP
{RETURN_VAL(LEX_MULTassign);}
	YY_BREAK
case 186:
YY_RULE_SETUP
{RETURN_VAL(LEX_DIVassign);}
	YY_BREAK
case 187:
YY_RULE_SETUP
{RETURN_VAL(LEX_MODassign);}
	YY_BREAK
case 188:
YY_RULE_SETUP
{RETURN_VAL(LEX_PLUSassign);}
	YY_BREAK
case 189:
YY_RULE_SETUP
{RETURN_VAL(LEX_MINUSassign);}
	YY_BREAK
case 190:
YY_RULE_SETUP
{RETURN_VAL(LEX_LSassign);}
	YY_BREAK
case 191:
YY_RULE_SETUP
{RETURN_VAL(LEX_RSassign);}
	YY_BREAK
case 192:
YY_RULE_SETUP
{RETURN_VAL(LEX_ANDassign);}
	YY_BREAK
case 193:
YY_RULE_SETUP
{RETURN_VAL(LEX_ERassign);}
	YY_BREAK
case 194:
YY_RULE_SETUP
{RETURN_VAL(LEX_ORassign);}
	YY_BREAK
case 195:
YY_RULE_SETUP
{RETURN_VAL(LEX_ELLIPSIS);}
	YY_BREAK
case 196:
YY_RULE_SETUP
{BEGIN COMMENT;RETURN_VAL(LEX_COMMENT_BLOCK_BEGIN);}
	YY_BREAK
case 197:
YY_RULE_SETUP
{BEGIN 0;RETURN_VAL(LEX_COMMENT_BLOCK_END);}
	YY_BREAK
case 198:
YY_RULE_SETUP
{RETURN_VAL(LEX_COMMENT_LINE);}
	YY_BREAK
case 199:
YY_RULE_SETUP
{RETURN_VAL(LEX_UNKNOW);}
	YY_BREAK
case 200:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 812 )
				yy_c = (YY_CHAR)yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 812 )
			yy_c = (YY_CHAR)yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 811);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = *(int*)&yy_c_buf_p - *(int*)&yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}
#endif /* YY_NO_INPUT */

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif


/* I won't bother to provide any error recovery. I won't  even  handle
unknown characters */

/*******************************************************************/
int isaTYPE(char* string)
{  
    return ('A' <= string[0] && 'Z' >= string[0]);
}

const char* myinputptr="int main(int argc, char* argv[]);";
const char* myinputlim;
int my_yyinput(char* buf,int max_size)
{
	int n = min(max_size,*(int*)&myinputlim - *(int*)&myinputptr);
	if(n > 0)
	{
		memcpy(buf,myinputptr,n);
		myinputptr += n;
	}
	return n;
}
#ifndef CODE_OS_NT_DRV
#ifdef CODE_OS_WIN
int main1(int argc, char* argv[])
#else
int main(int argc, char* argv[])
#endif
{
FILE* fp;
	size_t filelen=strlen(myinputptr);

	if(argc==2)
	{
		fp = fopen(argv[1],"r");
		if(fp)
		{
			filelen = fseek(fp,0,SEEK_END);
			filelen = ftell(fp);
			if(filelen<=0x1000000)
			{
				fseek(fp,0,SEEK_SET);
				char * _myinputptr = (char*)malloc(filelen);
				memset(_myinputptr,0,filelen); 
				filelen = fread(_myinputptr,1,filelen,fp);
				myinputptr = _myinputptr;
				//printf("read file %d\n",filelen,myinputptr);
			}
			else
				filelen = strlen(myinputptr);
			fclose(fp);
		}
	}
	myinputlim=myinputptr+filelen;
	int retvalue=-1;	
	while(retvalue=yylex())
{
	//printf("retvalue=%d %s\n",retvalue,yylval);
}
	//printf("exit retvalue=%d %s\n",retvalue,yylval);
return 0;
}
#endif


#ifdef CODE_OS_NT_DRV 
typedef TMap<void*,unsigned int > CALLOCMAP;
CALLOCMAP* gpLexAllocList=NULL; 
void myfree(void *ptr)
{
	CALLOCMAP::IT FindIT ;
	FindIT = gpLexAllocList->Find(ptr);
	if(FindIT!=gpLexAllocList->End())
	{
		gpLexAllocList->Remove(FindIT);
		delete ptr;
		if(gpLexAllocList->Count()==0)
		{
			delete gpLexAllocList;
			gpLexAllocList=NULL;
		}
	}
}
void* mymalloc(size_t size)
{
	void* ptr=NULL;
	ptr = (void*)new char[size];
	if(ptr)
	{
		if(gpLexAllocList==NULL)
		{
			gpLexAllocList=new CALLOCMAP;
			if(gpLexAllocList==NULL)
				return NULL;
		}
		gpLexAllocList->InsertUnique(ptr,size);
	}
	return ptr;
}
void* myrealloc(void* ptr, size_t size)
{
	char *TmpPtr=NULL;	
	CALLOCMAP::IT FindIT ;
	FindIT = gpLexAllocList->Find(ptr);
	if(FindIT!=gpLexAllocList->End())
	{
		if(*FindIT>=size)
			return ptr;
		TmpPtr = (char*)mymalloc(size);
		memcpy(TmpPtr,ptr,*FindIT);
		myfree(ptr);
	}
	return TmpPtr;
}
#endif
